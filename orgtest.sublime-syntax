%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
name: Testing orgmode syntax
file_extensions:
  - orgtest
  - archive
scope: source.example-c

contexts:
  main:
  #   # Strings begin and end with quotes, and use backslashes as an escape
  #   # character
  #   - match: '"'
  #     scope: punctuation.definition.string.begin.example-c
  #     push: double_quoted_string

    # Comments begin with white space, then '#' either a whitespace char or a newline
    - match: '^\s*[#](\s|$)'
      scope: punctuation.definition.comment.example-c
      push: line_comment

    # headlines begin with a '*' then a whitespace and finish at the end of the line
    - match: '^[*]+\s'
      scope: punctuation.definition.comment.example-c
      push: headline

# STARS KEYWORD PRIORITY TITLE TAGS
# e.g.
# *
# ** DONE
# *** Some e-mail
# **** TODO [#A] COMMENT Title :tag:a2%:

# MARKER is a character among * (bold), = (verbatim), / (italic), + (strike-through), _ (underline), ~ (code).


  line_comment:
    - meta_scope: comment.line.example-c
    - match: $
      pop: true

  line_headline:
    - meta_scope: headline.line.example-c
    - match: $
      pop: true

  #   # Keywords are if, else for and while.
  #   # Note that blackslashes don't need to be escaped within single quoted
  #   # strings in YAML. When using single quoted strings, only single quotes
  #   # need to be escaped: this is done by using two single quotes next to each
  #   # other.
  #   - match: '\b(if|else|for|while)\b'
  #     scope: keyword.control.example-c

  #   # Numbers
  #   - match: '\b(-)?[0-9.]+\b'
  #     scope: constant.numeric.example-c

  # double_quoted_string:
  #   - meta_scope: string.quoted.double.example-c
  #   - match: '\\.'
  #     scope: constant.character.escape.example-c
  #   - match: '"'
  #     scope: punctuation.definition.string.end.example-c
  #     pop: true

  # line_comment:
  #   - meta_scope: comment.line.example-c
  #   - match: $
  #     pop: true

  # italic:
  #   - match: |-
  #     (?x:
  #       (?<=\s|^)
  #       (\*|_)
  #       (?=\S)
  #       (?=(\1\1|(?!(?<=\S)\1).)++(?<=\S)\1)
  #       (?=[^\n]+(?<=\S)(\1)(?!\1|[\w\d]))
  #     )
  #   captures:
  #       1: punctuation.definition.italic
  #     push:
  #       - meta_scope: todo.italic
  #       - match: '(?<=\S)(\1)(?!\1|[\w\d])'
  #         captures:
  #           1: punctuation.definition.italic
  #         pop: true
